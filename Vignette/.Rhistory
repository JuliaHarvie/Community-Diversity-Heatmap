SetupFun <- function(Border_Coordinates, Trap_Coordinates,  Number_of_Sampling_Events = NULL, Four_Headed_Trap = FALSE){
if(!is.data.frame(Border_Coordinates) && !is.matrix(Border_Coordinates)){
stop("Border Coordinates need to be stored as either a dataframe or a matrix.", call.= F)
} else {
BC <- c(Border_Coordinates[1,1],Border_Coordinates[1,2])
for (n in 2:nrow(Border_Coordinates)) {
BC <- c(BC,Border_Coordinates[n,1],Border_Coordinates[n,2])
}
}
if(!is.data.frame(Trap_Coordinates) && !is.matrix(Trap_Coordinates)){
stop("Trap Coordinates need to be stored as either a dataframe or a matrix.", call. = F)
} else {
TC <- c(Trap_Coordinates[1,1],Trap_Coordinates[1,2])
for (n in 2:nrow(Trap_Coordinates)){
TC <- c(TC,Trap_Coordinates[n,1],Trap_Coordinates[n,2])
}
}
Number_of_Traps <- length(TC)/2
if (is.null(Number_of_Sampling_Events)||Number_of_Sampling_Events <= 0){
Number_of_Sampling_Events <- 1
}
storage <- list(BC, TC, Number_of_Sampling_Events, Number_of_Traps, Four_Headed_Trap)
return(storage)
}
View(SetupFun)
getwd()
#### Will requirre two preloaded Datasets here
DataSetOne <- read.csv(/Users/julia/Documents/Projects/AgMonitoringSDM/AGAWFiles/AGAW_coords_field.csv)
#### Will requirre two preloaded Datasets here
DataSetOne <- read.csv(\Users\julia\Documents\Projects\AgMonitoringSDM\AGAWFiles\AGAW_coords_field.csv)
#### Will requirre two preloaded Datasets here
DataSetOne <- read.csv(C:\\Users\julia\Documents\Projects\AgMonitoringSDM\AGAWFiles\AGAW_coords_field.csv)
#### Will requirre two preloaded Datasets here
DataSetOne <- read.csv(Users/julia/Documents/Projects/AgMonitoringSDM/AGAWFiles/AGAW_coords_field.csv)
#### Will requirre two preloaded Datasets here
DataSetOne <- read.csv("Users/julia/Documents/Projects/AgMonitoringSDM/AGAWFiles/AGAW_coords_field.csv")
#### Will requirre two preloaded Datasets here
DataSetOne <- read.csv("julia/Documents/Projects/AgMonitoringSDM/AGAWFiles/AGAW_coords_field.csv")
getwd()
#### Will requirre two preloaded Datasets here
DataSetOne <- read.csv("/Users/julia/Documents/Projects/AgMonitoringSDM/AGAWFiles/AGAW_coords_field.csv")
DataSetOne
vec <- vector("list,5")
vec <- vector("list",5)
vec
DataSetTwo <- read.csv("/Users/julia/Documents/Projects/AgMonitoringSDM/AGAWFiles/AGAW_coords_trap.csv")
setup <- SetupFun(Boarder_Coordinates = DataSetOne, Trap_Coordinates = DataSetTwo,
Number_of_Sampling_Events = 9, Four_Headed_Trap = T)
setup <- SetupFun(Border_Coordinates = DataSetOne, Trap_Coordinates = DataSetTwo,
Number_of_Sampling_Events = 9, Four_Headed_Trap = T)
setup
downSample()
Formatting_mBraveFun <- function(File, ID, Suffix_Symbol, Four_Headed_Trap = F) {
if (!("runName" %in% names(File) && "bin_uri" %in% names (File))){
stop("The correct fields have not been downloaded from mBrave", call. =  F)
}
split <- strsplit(File$runName, "[)]")
g <- which(grepl(ID,split[[1]]))
seperated <- as.data.frame(matrix(0,1,4))
for (n in 1:length(split)){
split[[n]] <- str_sub(split[[n]][g], str_locate(split[[n]],ID)[1,2] + 1)
seperated[n,1] <- str_sub(split[[n]],str_locate_all(split[[n]], "[0-9]+")[[1]][,1],str_locate_all(split[[n]], "[0-9]+")[[1]][,2])[1]
seperated[n,2] <- str_sub(split[[n]],str_locate_all(split[[n]], "[0-9]+")[[1]][,1],str_locate_all(split[[n]], "[0-9]+")[[1]][,2])[2]
if(n == round(length(split)*0.5,0)){show("25%")}
if(n == length(split)){show("50%")}
if(Four_Headed_Trap) {
if (length(str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2])) == 1){
if(str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2]) == "N"){
seperated[n,3] <- 1
} else if(str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2]) == "E"){
seperated[n,3] <- 2
} else if(str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2]) == "S"){
seperated[n,3] <- 3
} else if(str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2]) == "W"){
seperated[n,3] <- 4
}
seperated[n,4] <- File$bin_uri[n]
} else if (length(str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2])) >= 2) {
if(grep("N", str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2])) == 1 ){
seperated[n,3] <- 1
} else if(grep("A",str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2])) == 1){
seperated[n,3] <- 2
} else if(grep("U",str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2])) == 1){
seperated[n,3] <- 3
} else if(grep("W", str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2])) == 1){
seperated[n,3] <- 4
}
seperated[n,4] <- File$bin_uri[n]
} else if (length(str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2])) == 1){
if(str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2]) == "n"){
seperated[n,3] <- 1
} else if(str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2]) == "e"){
seperated[n,3] <- 2
} else if(str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2]) == "s"){
seperated[n,3] <- 3
} else if(str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2]) == "w"){
seperated[n,3] <- 4
}
seperated[n,4] <- File$bin_uri
} else if (length(str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2])) >= 2){
if(grep("n", str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2])) == 1 ){
seperated[n,3] <- 1
} else if(grep("a",str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2])) == 1){
seperated[n,3] <- 2
} else if(grep("U",str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2])) == 1){
seperated[n,3] <- 3
} else if(grep("W", str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2])) == 1){
seperated[n,3] <- 4
}
seperated[n,4] <- File$bin_uri[n]
} else{
stop("Bottle location on SLAM Trap has not been doccumented correctly. Please use E, East, e or east in the run$Name, directly after number related to sampling event ", call. =  F)
}
} else {
seperated[n,3] <- File$bin_uri[n]
}
}
event_lables <- as.numeric(sort(unique(seperated[,2])))
trap_lables <- as.numeric(sort(unique(seperated[,1])))
ready <- data.frame()
if(Four_Headed_Trap){
ready <- as.data.frame(matrix(0,1,length(event_lables)*length(trap_lables)*4))
for(n in 1:length(split)){
col <- (which(as.numeric(seperated[n,2]) == event_lables)-1)*length(trap_lables)*4 + (which(as.numeric(seperated[n,1]) == trap_lables)-1)*4 + seperated[n,3]
ready[colSums(!is.na(ready))[col] + 1,col] <- seperated[n,4]
if(n == 1){ready <- ready[-1,]}
if(n == round(length(split)*0.5,0)){show("75%")}
if(n == length(split)){show("100%")}
}
} else {
ready <- as.data.frame(matrix(0,1,length(event_lables)*length(trap_lables)))
for(n in 1:length(split)){
col <- (which(as.numeric(seperated[n,2]) == event_lables)-1)*length(trap_lables) + which(as.numeric(seperated[n,1]) == trap_lables)
ready[colSums(!is.na(ready))[col] + 1,col] <- seperated[n,3]
if(n == 1){ready <- ready[-1,]}
if(n == round(length(split)*0.5,0)){show("75%")}
if(n == length(split)){show("100%")}
}
}
return(ready)
}
# Optional Step: Formatting mBrave
# would like to remove this from offical package and just have output as a preloaded Dataset
formatted <- Formatting_mBrave(File=File,ID = "AGAW", Suffix_Symbol = ")", Four_Headed_Trap = T)
Formatting_mBraveFun <- function(File, ID, Suffix_Symbol, Four_Headed_Trap = F) {
if (!("runName" %in% names(File) && "bin_uri" %in% names (File))){
stop("The correct fields have not been downloaded from mBrave", call. =  F)
}
split <- strsplit(File$runName, "[)]")
g <- which(grepl(ID,split[[1]]))
seperated <- as.data.frame(matrix(0,1,4))
for (n in 1:length(split)){
split[[n]] <- str_sub(split[[n]][g], str_locate(split[[n]],ID)[1,2] + 1)
seperated[n,1] <- str_sub(split[[n]],str_locate_all(split[[n]], "[0-9]+")[[1]][,1],str_locate_all(split[[n]], "[0-9]+")[[1]][,2])[1]
seperated[n,2] <- str_sub(split[[n]],str_locate_all(split[[n]], "[0-9]+")[[1]][,1],str_locate_all(split[[n]], "[0-9]+")[[1]][,2])[2]
if(n == round(length(split)*0.5,0)){show("25%")}
if(n == length(split)){show("50%")}
if(Four_Headed_Trap) {
if (length(str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2])) == 1){
if(str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2]) == "N"){
seperated[n,3] <- 1
} else if(str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2]) == "E"){
seperated[n,3] <- 2
} else if(str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2]) == "S"){
seperated[n,3] <- 3
} else if(str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2]) == "W"){
seperated[n,3] <- 4
}
seperated[n,4] <- File$bin_uri[n]
} else if (length(str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2])) >= 2) {
if(grep("N", str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2])) == 1 ){
seperated[n,3] <- 1
} else if(grep("A",str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2])) == 1){
seperated[n,3] <- 2
} else if(grep("U",str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2])) == 1){
seperated[n,3] <- 3
} else if(grep("W", str_sub(split[[n]], str_locate_all(split[[n]], "[A-Z]+")[[1]][,1], str_locate_all(split[[n]], "[A-Z]+")[[1]][,2])) == 1){
seperated[n,3] <- 4
}
seperated[n,4] <- File$bin_uri[n]
} else if (length(str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2])) == 1){
if(str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2]) == "n"){
seperated[n,3] <- 1
} else if(str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2]) == "e"){
seperated[n,3] <- 2
} else if(str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2]) == "s"){
seperated[n,3] <- 3
} else if(str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2]) == "w"){
seperated[n,3] <- 4
}
seperated[n,4] <- File$bin_uri
} else if (length(str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2])) >= 2){
if(grep("n", str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2])) == 1 ){
seperated[n,3] <- 1
} else if(grep("a",str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2])) == 1){
seperated[n,3] <- 2
} else if(grep("U",str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2])) == 1){
seperated[n,3] <- 3
} else if(grep("W", str_sub(split[[n]], str_locate_all(split[[n]], "[a-z]+")[[1]][,1], str_locate_all(split[[n]], "[a-z]+")[[1]][,2])) == 1){
seperated[n,3] <- 4
}
seperated[n,4] <- File$bin_uri[n]
} else{
stop("Bottle location on SLAM Trap has not been doccumented correctly. Please use E, East, e or east in the run$Name, directly after number related to sampling event ", call. =  F)
}
} else {
seperated[n,3] <- File$bin_uri[n]
}
}
event_lables <- as.numeric(sort(unique(seperated[,2])))
trap_lables <- as.numeric(sort(unique(seperated[,1])))
ready <- data.frame()
if(Four_Headed_Trap){
ready <- as.data.frame(matrix(0,1,length(event_lables)*length(trap_lables)*4))
for(n in 1:length(split)){
col <- (which(as.numeric(seperated[n,2]) == event_lables)-1)*length(trap_lables)*4 + (which(as.numeric(seperated[n,1]) == trap_lables)-1)*4 + seperated[n,3]
ready[colSums(!is.na(ready))[col] + 1,col] <- seperated[n,4]
if(n == 1){ready <- ready[-1,]}
if(n == round(length(split)*0.5,0)){show("75%")}
if(n == length(split)){show("100%")}
}
} else {
ready <- as.data.frame(matrix(0,1,length(event_lables)*length(trap_lables)))
for(n in 1:length(split)){
col <- (which(as.numeric(seperated[n,2]) == event_lables)-1)*length(trap_lables) + which(as.numeric(seperated[n,1]) == trap_lables)
ready[colSums(!is.na(ready))[col] + 1,col] <- seperated[n,3]
if(n == 1){ready <- ready[-1,]}
if(n == round(length(split)*0.5,0)){show("75%")}
if(n == length(split)){show("100%")}
}
}
return(ready)
}
# Optional Step: Formatting mBrave
# would like to remove this from offical package and just have output as a preloaded Dataset
formatted <- Formatting_mBrave(File=File,ID = "AGAW", Suffix_Symbol = ")", Four_Headed_Trap = T)
# Optional Step: Formatting mBrave
# would like to remove this from offical package and just have output as a preloaded Dataset
formatted <- Formatting_mBraveFun(File=File,ID = "AGAW", Suffix_Symbol = ")", Four_Headed_Trap = T)
File <-  as.data.frame(fread("/Users/julia/Documents/Projects/AgMonitoringSDM/AGAWFiles/AGAW.tsv"))
library(data.table)
File <-  as.data.frame(fread("/Users/julia/Documents/Projects/AgMonitoringSDM/AGAWFiles/AGAW.tsv"))
formatted <- Formatting_mBraveFun(File=File,ID = "AGAW", Suffix_Symbol = ")", Four_Headed_Trap = T)
library(stringr)
formatted <- Formatting_mBraveFun(File=File,ID = "AGAW", Suffix_Symbol = ")", Four_Headed_Trap = T)
write.csv(formatted, "SamplingData.csv")
DataFun <- function(File, Setup) {
if (!is.data.frame(File)){
stop("Sampling data must be stored as a dataframe.", call. = F)
}
if (Setup[[5]] &&  ncol(File) != (Setup[[4]]*4*Setup[[3]])){
stop("Data provided for file does not match the parameters used in setup", calli.=F)
} else if (!(Setup[[5]]) && ncol(File) != (Setup[[4]]*Setup[[3]])) {
stop("Data provided for file does not match the parameters used in setup", calli.=F)
}
trap <- list(c(1))
for(n in 1:ncol(File)){
trap[[n]] <- (File[,n])
trap[[n]] <- as.character(trap[[n]])
trap[[n]] <- ifelse(trap[[n]]=="",NA,trap[[n]])
trap[[n]] <- trap[[n]][which(!is.na(trap[[n]]))]
}
return(trap)
}
rm(data.table())
remove.packages(data.table)
remove.packages("data.table")
remove.packages("stringr")
fread()
### Will require a third preloaded Dataset
DataSetThree <- read.csv("/Users/julia/Documents/Projects/AgMonitoringSDM/AGAWFiles/SampleData.csv")
### Will require a third preloaded Dataset
DataSetThree <- read.csv("/Users/julia/Documents/Projects/AgMonitoringSDM/AGAWFiles/SamplingData.csv")
data <- DataFun(File = DataSetThree, Setup = setup)
head(DataSetThree)
head(formatted)
data <- DataFun(File = formatted, Setup = setup)
data
### Will require a third preloaded Dataset
DataSetThree <- read.csv("/Users/julia/Documents/Projects/AgMonitoringSDM/AGAWFiles/SamplingData.csv")
DataSetThree[1:10,1:10]
data <- DataFun(File = DataSetThree, Setup = setup)
data
DataSetThree[1:10,1:20]
data
ConversionFun <- function(Setup,km = F, Poles = F){
Distance <- function(y1,y2,x1,x2, kmD = km){
varR <- 6371e3
radians <- function(d) {
d * pi / 180
}
lat1 <- radians(y1)
lat2 <- radians(y2)
latdif <- radians((y2 - y1))
londif <- radians((x2-x1))
equ1 <- (sin((latdif/2)))^2 + cos(lat1) * cos(lat2) * (sin((londif/2)))^2
equ2 <- 2 * atan2(sqrt(equ1),sqrt(1-equ1))
if (!(kmD)){
return(varR*equ2)
} else {
return(varR*equ2/1000)
}
}
k <- 2
xcorners <- c()
for (x in 1:(length(Setup[[1]])/2)){
xcorners[x] <- Setup[[1]][k]
k <- k+2
}
k <- 1
ycorners <- c()
for (y in 1:(length(Setup[[1]])/2)){
ycorners[y] <- Setup[[1]][k]
k <- k+2
}
if(Poles) {
if(ycorners[1] > 0){
### Calculates length of x axis (starts at LMX goes to RMX along the line of BMY) ###
LMX <- 180
BMY <- min(ycorners)
DX <- round(Distance(BMY,BMY,180,0,km=km),0)
### Calculates length of y axis (starts at BMY goes to TMY along the line of LMX) ###
DY <- DX
} else {
LMX <- 180
BMY <- max(ycorners)
DX <- round(Distance(BMY,BMY,180,0,km=km),0)
DY <- DX
}
} else {
BMY <- min(ycorners)
LMX <- min(xcorners)
DX <- round(Distance(min(ycorners),min(ycorners),min(xcorners),max(xcorners),km=km),0)
DY <- round(Distance(min(ycorners),max(ycorners),min(xcorners),min(xcorners),km=km),0)
}
plot_outline <- c()
for (k in 1:length(xcorners)){
plot_outline <- c(plot_outline, round(Distance(BMY,BMY,LMX,xcorners[k],km=km),0),round(Distance(BMY,ycorners[k],LMX,LMX,km=km),0))
}
k <- 2
xcorners <- c()
for (x in 1:(length(Setup[[2]])/2)){
xcorners[x] <- Setup[[2]][k]
k <- k+2
}
k <- 1
ycorners <- c()
for (y in 1:(length(Setup[[2]])/2)){
ycorners[y] <- Setup[[2]][k]
k <- k+2
}
trap_locations <- c()
for (k in 1:length(xcorners)){
trap_locations <- c(trap_locations, round(Distance(BMY,BMY,LMX,xcorners[k],km=km),0),round(Distance(BMY,ycorners[k],LMX,LMX,km=km),0))
}
return(list(plot_outline,trap_locations))
}
type(True)
Test <- T
type(T)
summary(Test)
install.packages(c("data.table", "stringr"))
install.packages(c("data.table", "stringr"))
install.packages(c("data.table", "stringr"))
conversion <- ConversionFun(Setup = setup,km = F, Poles = F)
conversion
MasterDataFrameFun <- function(Data,Setup,Conversion,Repeat=T,Model_Type){
if(Model_Type=="Binomial"){
Found <- c()
Unique <- unique(unlist(Data))
if(Setup[[5]]){
total <- length(Data)*length(Unique)
k <- 1
for (d in seq(1,length(Data),by=4)){
for(n in 1:length(Unique)){
Found[(k-1)*length(Unique)+n] <- ifelse(length(grep(Unique[n],c(Data[[d]], Data[[d+1]], Data[[d+2]], Data[[d+3]])))>=1,1,0)
if(length(Found) == round(total/4*0.25,0)){show("25%")}
if(length(Found) == round(total/4*0.5,0)){show("50%")}
if(length(Found) == round(total/4*0.75,0)){show("75%")}
if(length(Found) == total/4){show("100%")}
ID <- rep(Unique,length(Data)/4)
}
k <- k+1
}
} else {
total <- length(Data)*length(Unique)
for (d in 1:length(Data)){
for(n in 1:length(Unique)){
Found[(d-1)*length(Unique)+n] <- ifelse(length(grep(Unique[n],Data[[d]]))>=1,1,0)
if(length(Found) == round(total*0.25,0)){show("25%.")}
if(length(Found) == round(total*0.5,0)){show("50%")}
if(length(Found) == round(total*0.75,0)){show("75%")}
if(length(Found) == total){show("100%")}
}
}
ID <- rep(Unique,length(Data))
}
if(Repeat){
show("Repeat calculated for Event:")
Repeat <- rep(NA,times=length(ID))
Grouping <- seq(0,by=length(Unique),length.out = Setup[[4]])
Check <- function(x){
y <- which(Unique==ID[x])
sum(Found[(Grouping+(length(Unique)*(M-1)))+y])
}
sort <- matrix(1:length(ID),ncol=Setup[[3]])
for(M in 1:Setup[[3]]){
Repeat[sort[,M]] <- sapply(sort[,M],Check)
show(M)
}
}else{
Repeat <- rep(NA,times=length(ID))
}
Event <- rep(c(1:Setup[[3]]),each = ((length(Unique)*Setup[[4]])))
LongX <- rep(Conversion[[2]][seq(1,length(Conversion[[2]])-1,by=2)], each=length(Unique),times=Setup[[3]])
LatY <- rep(Conversion[[2]][seq(2,length(Conversion[[2]]),by=2)],each=length(Unique),times=Setup[[3]])
Trap <- rep(c(1:Setup[[4]]),each=length(Unique),times=Setup[[3]])
Frame <- data.frame("ID" = c(ID), "LongX" = c(LongX), "LatY" = c(LatY), "Event" = c(Event), "Trap" = c(Trap), "Repeat" = c(Repeat), "Found" = c(Found))
return(Frame)
} else if(Model_Type=="Linear"){
if(Setup[[5]]){
string <- seq(1,length=Setup[[4]]*Setup[[3]],by=4)
Found <- NA
for(n in string){
Found <- c(Found,length(unique(c(Data[[n]],Data[[n+1]],Data[[n+2]],Data[[n+3]]))))
}
Found <- Found[-1]
} else{
Found <-  sapply(Data,length)
}
LongX <- rep(Conversion[[2]][seq(1,length(Conversion[[2]])-1,by=2)],times=Setup[[3]])
LatY <- rep(Conversion[[2]][seq(2,length(Conversion[[2]]),by=2)],times=Setup[[3]])
Event <- rep(1:Setup[[3]],each=Setup[[4]])
Frame <- data.frame("LongX" = c(LongX), "LatY" = c(LatY), "Event" = c(Event),"Found" = c(Found))
return(Frame)
} else {
stop("Currently the only model types supported are 'Binomial' and 'Linear'", call.= F)
}
}
masterdataframe <- MasterDataFrameFun(Data = data, Setup = setup, Conversion = conversion,
Repeat=T,"Binomial")
DownSampleFun <- function(Dataframe,p=0.7)
DownSampleFun <- function(Dataframe,p=0.7){
DataPartition <- createDataPartition(Dataframe$Found, p=p, list = F)
TrainingData <- Dataframe[DataPartition, ]
TestingData <- Dataframe[-DataPartition, ]
TrainingData$Found <- as.factor(TrainingData$Found)
DownSampled <- downSample(x = TrainingData[,1:(ncol(Dataframe)-1)],y = TrainingData$Found, yname="Found")
Export <- list(DownSampled,TrainingData,TestingData)
return(Export)
}
downsampled <- DownSampleFun(Dataframe = masterdataframe)
library(caret)
library(data.table)
install.packages("data.table")
downsampled <- DownSampleFun(Dataframe = masterdataframe)
library(caret)
library(data.table)
downsampled <- DownSampleFun(Dataframe = masterdataframe)
